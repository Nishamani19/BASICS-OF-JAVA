import java.util.LinkedList;
import java.util.Queue;

class Graph {
    int[][] matrix;
    int vertices;

    public Graph(int v) {
        vertices = v;
        matrix = new int[v][v];
    }

    public void addEdge(int src, int dest) {
        if (src >= vertices || dest >= vertices) {
            System.out.println("Invalid input");
            return;
        }
        matrix[src][dest] = 1;
        matrix[dest][src] = 1;
    }

    public void bfs(int start) {
        boolean[] visited = new boolean[vertices];
        Queue<Integer> queue = new LinkedList<>();

        visited[start] = true;
        queue.add(start);

        while (!queue.isEmpty()) {
            int node = queue.poll();
            System.out.print(node + " ");

            for (int i = 0; i < vertices; i++) {
                if (matrix[node][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    queue.add(i);
                }
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Graph g = new Graph(6);
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 3);
        g.addEdge(2, 4);
        g.addEdge(3, 5);
        g.addEdge(4, 5);

        System.out.print("BFS: ");
        g.bfs(0);
    }
}
