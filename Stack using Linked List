class Node
{
	int data;
	Node next;

	Node(int data)
	{
		this.data=data;
		this.next=null;
	}

}
class stack
{
	Node top;
	int count;

	public void push(int data)
	{
		Node newNode=new Node(data);
		newNode.next=top;
		top=newNode;
		count++;

		System.out.println(data+ "push data added on stack");
	}

	public int pop()
	{
		if(isEmpty())
		{
			System.out.println("Stack Underflow");
		}
		int poped=top.data;
		top=top.next;
		count--;

		System.out.println(poped+"Poped from Stack");
		return poped;
	}

	public int peek()
	{
		if(isEmpty())
		{
			System.out.println("Stack is Empty");
			return-1;
		}
		return top.data;
	}

	public boolean isEmpty()
	{
		return top==null;
	}

	public int size()
	{
		return count;
	}

	public void clear()
	{
		top=null;
		count=0;
		System.out.println("Stack is cleared");
	}

	public boolean contains(int value)
	{
		Node temp = top;
		while(temp!=null)
		{
			if(temp.data==value)
				return true;
			temp=temp.next;
		}
		return false;
	}

	public void display()
	{
		if(isEmpty())
		{
			System.out.println("Stack is Empty");
			return;
		}
		Node temp=top;
		System.out.println("Stack top to bottom");
		while(temp!=null)
		{
			System.out.println(temp.data+" ");
			temp=temp.next;
		}
	}

}
public class Main
{
	public static void main(String[]args)
	{
		stack stack = new stack();
		stack.push(10);
		stack.push(20);
		stack.push(40);
		stack.display();
		System.out.println("Top Element"+stack.peek());
		System.out.println("Stack Size"+stack.size());
		stack.pop();

		System.out.println("Contains 20"+stack.contains(20));
		System.out.println("Contains 40"+stack.contains(40));

		stack.clear();
		stack.display();
	}
}
